//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.6.6124.16498 (NJsonSchema v4.26.6123.28532) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace FFmpegFarm.Worker.Client
{
#pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class AudioJobClient
    {
        public AudioJobClient() : this("http://localhost:9000") { }

        public AudioJobClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <summary>Create a new job</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Guid> CreateNewAsync(AudioJobRequestModel input)
        {
            return CreateNewAsync(input, CancellationToken.None);
        }

        /// <summary>Create a new job</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Guid> CreateNewAsync(AudioJobRequestModel input, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/AudioJob");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(input));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(Guid);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Guid>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class ClientClient
    {
        public ClientClient() : this("http://localhost:9000") { }

        public ClientClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ClientHeartbeat>> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ClientHeartbeat>> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Client");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(ObservableCollection<ClientHeartbeat>);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<ClientHeartbeat>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class HealthCheckClient
    {
        public HealthCheckClient() : this("http://localhost:9000") { }

        public HealthCheckClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ServiceStatus> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ServiceStatus> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/HealthCheck");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(ServiceStatus);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ServiceStatus>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class JobClient
    {
        public JobClient() : this("http://localhost:9000") { }

        public JobClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<FFmpegTaskDto> GetNextAsync(string machineName)
        {
            return GetNextAsync(machineName, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<FFmpegTaskDto> GetNextAsync(string machineName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Job");

            if (machineName == null)
                throw new ArgumentNullException("machineName");
            else
                url_ += string.Format("machineName={0}&", Uri.EscapeDataString(machineName.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(FFmpegTaskDto);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FFmpegTaskDto>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<bool> DeleteJobAsync(Guid jobCorrelationId)
        {
            return DeleteJobAsync(jobCorrelationId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<bool> DeleteJobAsync(Guid jobCorrelationId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Job");

            if (jobCorrelationId == null)
                throw new ArgumentNullException("jobCorrelationId");
            else
                url_ += string.Format("jobCorrelationId={0}&", Uri.EscapeDataString(jobCorrelationId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(bool);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<bool>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<bool> PauseJobAsync(Guid jobCorrelationId)
        {
            return PauseJobAsync(jobCorrelationId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<bool> PauseJobAsync(Guid jobCorrelationId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/job/pause/{jobCorrelationId}");

            if (jobCorrelationId == null)
                throw new ArgumentNullException("jobCorrelationId");
            url_ = url_.Replace("{jobCorrelationId}", Uri.EscapeDataString(jobCorrelationId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(bool);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<bool>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<bool> ResumeJobAsync(Guid jobCorrelationId)
        {
            return ResumeJobAsync(jobCorrelationId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<bool> ResumeJobAsync(Guid jobCorrelationId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/job/resume/{jobCorrelationId}");

            if (jobCorrelationId == null)
                throw new ArgumentNullException("jobCorrelationId");
            url_ = url_.Replace("{jobCorrelationId}", Uri.EscapeDataString(jobCorrelationId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(bool);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<bool>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class MuxJobClient
    {
        public MuxJobClient() : this("http://localhost:9000") { }

        public MuxJobClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Guid> CreateNewAsync(MuxJobRequestModel input)
        {
            return CreateNewAsync(input, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Guid> CreateNewAsync(MuxJobRequestModel input, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/MuxJob");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(input));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(Guid);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Guid>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class StatusClient
    {
        public StatusClient() : this("http://localhost:9000") { }

        public StatusClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <summary>Get status for all jobs</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<FfmpegJobModel>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }

        /// <summary>Get status for all jobs</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<FfmpegJobModel>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(ObservableCollection<FfmpegJobModel>);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<FfmpegJobModel>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <summary>Update progress of an active job.
        /// 
        /// This also serves as a heartbeat, to tell the server
        /// that the client is still working actively on the job</summary>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task UpdateProgressAsync(TaskProgressModel model)
        {
            return UpdateProgressAsync(model, CancellationToken.None);
        }

        /// <summary>Update progress of an active job.
        /// 
        /// This also serves as a heartbeat, to tell the server
        /// that the client is still working actively on the job</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task UpdateProgressAsync(TaskProgressModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <summary>Get status for a specific job</summary>
        /// <param name="id">ID of job to get status of</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<JobStatus> GetAsync(Guid id)
        {
            return GetAsync(id, CancellationToken.None);
        }

        /// <summary>Get status for a specific job</summary>
        /// <param name="id">ID of job to get status of</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<JobStatus> GetAsync(Guid id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status/{id}");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(JobStatus);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<JobStatus>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }



    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class AudioJobRequestModel
    {

        [JsonProperty("Targets", Required = Required.Always)]
        [Required]
        public ObservableCollection<AudioDestinationFormat> Targets { get; set; } = new ObservableCollection<AudioDestinationFormat>();

        [JsonProperty("DestinationFilenamePrefix", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationFilenamePrefix { get; set; }

        [JsonProperty("SourceFilename", Required = Required.Always)]
        [Required]
        public string SourceFilename { get; set; }

        [JsonProperty("OutputFolder", Required = Required.Always)]
        [Required]
        public string OutputFolder { get; set; }

        [JsonProperty("Needed", Required = Required.Always)]
        [Required]
        public DateTime Needed { get; set; }

        [JsonProperty("Inpoint", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inpoint { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AudioJobRequestModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioJobRequestModel>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class AudioDestinationFormat
    {

        [JsonProperty("AudioCodec", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatAudioCodec? AudioCodec { get; set; }

        [JsonProperty("Format", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatFormat? Format { get; set; }

        [JsonProperty("Bitrate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        [JsonProperty("Channels", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatChannels? Channels { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AudioDestinationFormat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioDestinationFormat>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class ClientHeartbeat
    {

        [JsonProperty("MachineName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MachineName { get; set; }

        [JsonProperty("LastHeartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? LastHeartbeat { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ClientHeartbeat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ClientHeartbeat>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class ServiceStatus
    {

        [JsonProperty("Workers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<WorkerStatus> Workers { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ServiceStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ServiceStatus>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class WorkerStatus
    {

        [JsonProperty("WorkerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WorkerName { get; set; }

        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public WorkerStatusStatus? Status { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static WorkerStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<WorkerStatus>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FFmpegTaskDto
    {

        [JsonProperty("Id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("FfmpegJobsId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FfmpegJobsId { get; set; }

        [JsonProperty("Arguments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Arguments { get; set; }

        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FFmpegTaskDtoState? State { get; set; }

        [JsonProperty("Started", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Started { get; set; }

        [JsonProperty("Heartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Heartbeat { get; set; }

        [JsonProperty("HeartbeatMachineName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HeartbeatMachineName { get; set; }

        [JsonProperty("Progress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress { get; set; }

        [JsonProperty("DestinationFilename", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationFilename { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static FFmpegTaskDto FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FFmpegTaskDto>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class MuxJobRequestModel
    {

        [JsonProperty("VideoSourceFilename", Required = Required.Always)]
        [Required]
        public string VideoSourceFilename { get; set; }

        [JsonProperty("AudioSourceFilename", Required = Required.Always)]
        [Required]
        public string AudioSourceFilename { get; set; }

        [JsonProperty("DestinationFilename", Required = Required.Always)]
        [Required]
        public string DestinationFilename { get; set; }

        [JsonProperty("OutputFolder", Required = Required.Always)]
        [Required]
        public string OutputFolder { get; set; }

        [JsonProperty("Needed", Required = Required.Always)]
        [Required]
        public DateTime Needed { get; set; }

        [JsonProperty("Inpoint", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inpoint { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static MuxJobRequestModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MuxJobRequestModel>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FfmpegJobModel
    {

        [JsonProperty("JobCorrelationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Guid? JobCorrelationId { get; set; }

        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FfmpegJobModelState? State { get; set; }

        [JsonProperty("Created", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Created { get; set; }

        [JsonProperty("Needed", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Needed { get; set; }

        [JsonProperty("Tasks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<FfmpegTaskModel> Tasks { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static FfmpegJobModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FfmpegJobModel>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FfmpegTaskModel
    {

        [JsonProperty("Progress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress { get; set; }

        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FfmpegTaskModelState? State { get; set; }

        [JsonProperty("Heartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Heartbeat { get; set; }

        [JsonProperty("HeartbeatMachine", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HeartbeatMachine { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static FfmpegTaskModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FfmpegTaskModel>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class TaskProgressModel
    {

        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        [JsonProperty("MachineName", Required = Required.Always)]
        [Required]
        public string MachineName { get; set; }

        [JsonProperty("Failed", Required = Required.Always)]
        public bool Failed { get; set; }

        [JsonProperty("Done", Required = Required.Always)]
        public bool Done { get; set; }

        [JsonProperty("Progress", Required = Required.Always)]
        [Required]
        public string Progress { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TaskProgressModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskProgressModel>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class JobStatus
    {

        [JsonProperty("JobCorrelationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Guid? JobCorrelationId { get; set; }

        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public JobStatusState? State { get; set; }

        [JsonProperty("Created", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Created { get; set; }

        [JsonProperty("OutputFiles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<string> OutputFiles { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static JobStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<JobStatus>(data);
        }
    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatAudioCodec
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "MP3")]
        MP3 = 1,

        [EnumMember(Value = "AAC")]
        AAC = 2,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatFormat
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "MP4")]
        MP4 = 1,

        [EnumMember(Value = "MKV")]
        MKV = 2,

        [EnumMember(Value = "AAC")]
        AAC = 3,

        [EnumMember(Value = "MP3")]
        MP3 = 4,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatChannels
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "Mono")]
        Mono = 1,

        [EnumMember(Value = "Stereo")]
        Stereo = 2,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum WorkerStatusStatus
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "OK")]
        OK = 1,

        [EnumMember(Value = "NonResponsive")]
        NonResponsive = 2,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FFmpegTaskDtoState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "Queued")]
        Queued = 1,

        [EnumMember(Value = "Paused")]
        Paused = 2,

        [EnumMember(Value = "InProgress")]
        InProgress = 3,

        [EnumMember(Value = "Done")]
        Done = 4,

        [EnumMember(Value = "Failed")]
        Failed = 5,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FfmpegJobModelState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "Queued")]
        Queued = 1,

        [EnumMember(Value = "Paused")]
        Paused = 2,

        [EnumMember(Value = "InProgress")]
        InProgress = 3,

        [EnumMember(Value = "Done")]
        Done = 4,

        [EnumMember(Value = "Failed")]
        Failed = 5,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FfmpegTaskModelState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "Queued")]
        Queued = 1,

        [EnumMember(Value = "Paused")]
        Paused = 2,

        [EnumMember(Value = "InProgress")]
        InProgress = 3,

        [EnumMember(Value = "Done")]
        Done = 4,

        [EnumMember(Value = "Failed")]
        Failed = 5,

    }

    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum JobStatusState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,

        [EnumMember(Value = "Queued")]
        Queued = 1,

        [EnumMember(Value = "Paused")]
        Paused = 2,

        [EnumMember(Value = "InProgress")]
        InProgress = 3,

        [EnumMember(Value = "Done")]
        Done = 4,

        [EnumMember(Value = "Failed")]
        Failed = 5,

    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class FileParameter
    {
        public FileParameter(Stream data)
            : this(data, null)
        {
        }

        public FileParameter(Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException)
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}